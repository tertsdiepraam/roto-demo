fn add(_time: f32) {
    let i =  0;
    while i < 20 {
        let x = f32.rand(0.4, 1.0);
        let y = -10.0;
        let z = f32.rand(0.4, 1.0);
        let color = Color.new(
            f32.rand(0.0, 0.5),
            f32.rand(0.0, 0.5),
            f32.rand(0.5, 0.8),
        );
        emit(Particle.new(
            Vec3.new(x, y, z),
            1.0,
            color,
        ));

        i = i + 1;
    }
}

type Vec2 {
    x: f32,
    y: f32,
}

fn rotate(v: Vec2, angle: f32) -> Vec2 {
    let x = v.x;
    let y = v.y;
    let cos = angle.cos();
    let sin = angle.sin();
    let x2 = x * cos - y * sin;
    let y2 = x * sin + y * cos;
    Vec2 { x: x2, y: y2 }
}

fn update(time: f32, p: Particle) -> Particle? {
    let lifetime = 20.0;
    let speed: f32 = 0.1;

    if time > lifetime {
        return None;
    }

    let t = time / lifetime;

    let pos = p.pos();
    let x = pos.x();
    let z = pos.z();
    let rot_pos = rotate(
        Vec2 { x: x, y: z },
        speed,
    );

    let f: f32 = 5.0;
    let scale_factor = f.pow(1.0 / (lifetime * 60.0));
    let new_pos = Vec3.new(
        scale_factor * rot_pos.x,
        26.0 * t - 10.0,
        scale_factor * rot_pos.y,
    );

    let scale = t.pow(0.5);
    let color = p.color();
    Some(Particle.new(new_pos, scale, color))
}
